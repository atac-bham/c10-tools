trigger:
- master

variables:
  major: 0
  minor: 1

name: $(major).$(minor)$(Rev:.r)

jobs:

- job: Test
  strategy:
    maxParallel: 5
    matrix:
      Ubuntu-py3.6:
        imageName: 'ubuntu-latest'
        python.version: '3.6'
        python.env: '36'
      Ubuntu-py3.7:
        imageName: 'ubuntu-latest'
        python.version: '3.7'
        python.env: '37'
      Ubuntu-py3.8:
        imageName: 'ubuntu-latest'
        python.version: '3.8'
        python.env: '38'
      macOS-py3.6:
        imageName: 'macos-latest'
        python.version: '3.6'
        python.env: '36'
      macOS-py3.7:
        imageName: 'macos-latest'
        python.version: '3.7'
        python.env: '37'
      macOS-py3.8:
        imageName: 'macos-latest'
        python.version: '3.8'
        python.env: '38'
      Windows-py3.6:
        imageName: 'windows-latest'
        python.version: '3.6'
        python.env: '36'
      Windows-py3.7:
        imageName: 'windows-latest'
        python.version: '3.7'
        python.env: '37'
      Windows-py3.8:
        imageName: 'windows-latest'
        python.version: '3.8'
        python.env: '38'

  pool:
    vmImage: $(imageName)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "$(python.version)"
      architecture: 'x64'

  - script: python -m pip install -U tox pytest-azurepipelines
    displayName: 'Install dependencies'

  - script: "tox -e py$(python.env)-c10,py$(python.env)-i106"
    displayName: 'Run Tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'junit-*.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'

# Create dist files for PyPI release
- job: Build
  dependsOn: 'Test'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.8"
      architecture: 'x64'

  - script: "python -m pip install -U pip setuptools wheel"
    displayName: "Install dependencies"

  - script: "echo \"version = '$(Build.BuildNumber)'\" > c10_tools/version.py"
    displayName: "Update version # to match build"

  - script: "python setup.py sdist bdist_wheel"
    displayName: "Build source & wheel distributions"

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: 'dist'
      artifactName: dist

# Bundle "full" zip that includes dependencies for offline installation.
- job: Package
  dependsOn: 'Test'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.8"
      architecture: 'x64'

  - script: "python -m pip download -r requirements.txt -d dependencies --no-binary :all:"
    displayName: 'Download dependencies'

  - task: ArchiveFiles@2
    displayName: 'Zip full package'
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)' 
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: 'c10-tools-$(Build.BuildNumber)-full.zip' 
      replaceExistingArchive: true 

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: 'c10-tools-$(Build.BuildNumber)-full.zip'
      artifactName: complete-library
