#!/usr/bin/env python

"""Compile scripts into binary form."""

from glob import glob
import os
import shutil
import subprocess
import sys

import chapter10
c10_path = os.path.dirname(os.path.dirname(chapter10.__file__))


def clean():
    if '-q' not in sys.argv:
        print 'Removing spec files.'
    for f in glob('*.spec'):
        os.remove(f)
    if '-q' not in sys.argv:
        print 'Removing dist and build directories.'
    shutil.rmtree('dist', True)
    shutil.rmtree('build', True)


def compile():
    # Ensure PyInstaller is available.
    if '-q' not in sys.argv:
        print 'Checking for PyInstaller...',
    command = 'where' if sys.platform == 'win32' else 'which'
    if subprocess.call([command, 'pyinstaller'], stdout=subprocess.PIPE,
                       stderr=subprocess.STDOUT):
        print 'PyInstaller not found. Try: pip install pyinstaller and run \
again.'
        return
    if '-q' not in sys.argv:
        print 'ok'

    for script in glob('c10-*.py') + ['pcap2c10.py']:
        if '-q' not in sys.argv:
            print 'Compiling %s...' % os.path.basename(script),
        subprocess.call(['pyinstaller', '-p', c10_path, '-F', script],
                        stdout=subprocess.PIPE if '-v' not in sys.argv
                        else None, stderr=subprocess.STDOUT)
        if '-q' not in sys.argv:
            print 'done'


def main():
    if '-h' in sys.argv or '--help' in sys.argv:
        print 'usage: compile [clean] [-q | -v]'
    elif sys.argv[-1] == 'clean':
        clean()
    else:
        compile()


if __name__ == "__main__":
    main()
